#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono> // include chrono for high_resolution_clock
using namespace std;
using namespace std::chrono;

void MergeSort(int v[], int st, int dr)
{
    int* tmp = new int[1000001];
    if (st < dr)
    {
        int m = (st + dr) / 2;
        MergeSort(v, st, m);
        MergeSort(v, m + 1, dr);
        int i = st, j = m + 1, k = 0;
        while (i <= m && j <= dr)
            if (v[i] < v[j])
            {
                tmp[k] = v[i];
                k++;
                i++;
            }
            else {
                tmp[k] = v[j];
                k++;
                j++;
            }
        while (i <= m)
        {
            tmp[k] = v[i];
            k++;
            i++;
        }
        while (j <= dr)
        {
            tmp[k] = v[j];
            k++;
            j++;
        }
        i = st;
        j = 0;
        while (i <= dr) {
            v[i] = tmp[j];
            i++;
            j++;
        }
    }
    delete[] tmp;
}

int main() {
    int n, j;
    srand(time(nullptr));
    n = 10;
    int* v = new int[10];

    for (int i = 0; i < n; i++)
    {
        v[i] = rand() % 1000000;
    }
    auto start = std::chrono::high_resolution_clock::now();

    MergeSort(v, 0, n - 1);

    auto stop = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);

    cout << "Time taken by function: " << duration.count() << " microseconds" << endl;

    delete[] v;
    return 0;
}